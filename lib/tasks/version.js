// Generated by CoffeeScript 1.7.0
(function() {
  var Log, fs, path, task, types, updateFiles, updateVersion, utils;

  fs = require('fs');

  path = require('path');

  utils = require('../utils');

  Log = require('../log');

  updateFiles = function(files, builds, value) {
    var build, data, file, key, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      Log("- updating file <yellow>" + file + "</yellow> with version: <b>" + value + "</b>");
      data = fs.readFileSync(file, 'utf8');
      for (key in builds) {
        build = builds[key];
        data = updateVersion(data, value, build);
      }
      _results.push(fs.writeFileSync(file, data));
    }
    return _results;
  };

  updateVersion = function(data, value, build) {
    var bname, ext, match, replace;
    ext = path.extname(pkg.target);
    bname = path.basename(pkg.target, ext);
    match = new RegExp("=(\"|')(.*/?)" + bname + "[^\"']?" + ext + "(\"|')");
    replace = "=$1$2" + bname + "." + value + ext + "$3";
    if (data.match(match)) {
      Log("> found target: " + pkg.target);
      return data.replace(match, replace);
    } else {
      return data;
    }
  };

  types = {
    "package": function() {
      return JSON.parse(fs.readFileSync('./package.json', 'utf8')).version;
    }
  };

  task = function() {
    this.type || (this.type = 'package');
    if (!types[this.type]) {
      Log.errorAndExit("Invalid version type " + this.type + " for job " + this.job.name);
    }
    this.version || (this.version = types[this.type]);
    this.trim = function(url) {
      return url.replace(/^([^.]+).*(\.css|\.js)$/i, "$1$2");
    };
    return function(next) {
      var results;
      results = updateFiles(this.src, this.job.app.tasks.build, this.version());
      return next(null, results);
    };
  };

  module.exports = task;

}).call(this);
