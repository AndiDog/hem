// Generated by CoffeeScript 1.7.0
(function() {
  var Dependency, Log, Stitch, compile, compileLibs, compileModules, fs, path, task, uglifyjs, utils;

  Dependency = require('../dependency');

  Stitch = require('../stitch');

  Log = require('../log');

  utils = require('../utils');

  path = require('path');

  uglifyjs = require('uglify-js');

  fs = require('fs');

  compile = function(task) {
    var result;
    result = [task.before, compileLibs(task.libs), compileModules(task), task.after].join("\n");
    if (task.argv.compress) {
      result = uglifyjs.minify(result, {
        fromString: true
      }).code;
    }
    return result;
  };

  compileModules = function(task) {
    var modules;
    task.stitch || (task.stitch = new Stitch(task.src));
    task.depend || (task.depend = new Dependency(task.modules));
    modules = task.depend.resolve().concat(task.stitch.resolve());
    if (modules && task.bundle) {
      return Stitch.bundle(task.bundle, modules);
    } else {
      return "";
    }
  };

  compileLibs = function(task, parentDir) {
    var dir, file, results, slash, stats, _i, _len, _ref;
    if (parentDir == null) {
      parentDir = "";
    }
    results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      slash = parentDir === "" ? "" : path.sep;
      file = parentDir + slash + file;
      if (fs.existsSync(file)) {
        stats = fs.lstatSync(file);
        if (stats.isDirectory()) {
          dir = fs.readdirSync(file);
          results.push(compileLibs(task, dir, file));
        } else if (stats.isFile() && ((_ref = path.extname(file)) === '.js' || _ref === '.coffee')) {
          results.push(fs.readFileSync(file, 'utf8'));
        }
      }
    }
    return results.join("\n");
  };

  task = function() {
    this.targetExt = "js";
    this.bundle = "require";
    this.before = utils.arrayToString(this.before || "");
    this.after = utils.arrayToString(this.after || "");
    return function(params) {
      var dirname, ex, extra, source, write, _ref;
      if (params.watch) {
        if ((_ref = this.stitch) != null) {
          _ref.clear(params.watch);
        }
      }
      extra = (this.argv.compress && " <b>--using compression</b>") || "";
      Log.info("- Building target: <yellow@target}</yellow>" + extra);
      try {
        source = compile(this);
      } catch (_error) {
        ex = _error;
        this.handleError(ex);
        return "";
      }
      write = this.argv.command !== "server";
      if (source && write) {
        dirname = path.dirname(this.target);
        if (!fs.existsSync(dirname)) {
          fs.mkdirsSync(dirname);
        }
        fs.writeFileSync(this.target, source);
      }
      return source;
    };
  };

  module.exports = task;

}).call(this);
