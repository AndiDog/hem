// Generated by CoffeeScript 1.7.0
(function() {
  var Dependency, Log, Stitch, compile, compileLibs, compileModules, path, task, uglifyjs, utils;

  Dependency = require('../dependency');

  Stitch = require('../stitch');

  Log = require('../log');

  utils = require('../utils');

  path = require('path');

  uglifyjs = require('uglify-js');

  compile = function(task) {
    var result;
    result = [compileModules(task)].join("\n");
    if (task.argv().compress) {
      result = uglifyjs.minify(result, {
        fromString: true
      }).code;
    }
    return result;
  };

  compileModules = function(task) {
    task.stitch || (task.stitch = new Stitch(task.src));
    return task.stitch.resolve({
      bundle: task.bundle,
      commonjs: task.commonjs,
      npm: task.npm
    });
  };

  compileLibs = function(task) {
    task.stitchLibs || (task.stitchLibs = new Stitch(task.lib));
    return task.stitchLibs.resolve({
      bundle: true,
      commonjs: false
    });
  };

  task = function() {
    this.targetExt = "js";
    this.bundle || (this.bundle = true);
    this.commonjs || (this.commonjs = "require");
    this.npm || (this.npm = false);
    if (this.before) {
      this.before = utils.arrayToString(this.before || "");
    }
    if (this.after) {
      this.after = utils.arrayToString(this.after || "");
    }
    return function(params) {
      var ex, extra, source, _ref;
      if (params.watch) {
        if ((_ref = this.stitch) != null) {
          _ref.clear(params.watch);
        }
      }
      extra = (this.argv().compress && " <b>--using compression</b>") || "";
      Log.info("- Building target: <yellow@target}</yellow>" + extra);
      try {
        source = compile(this);
      } catch (_error) {
        ex = _error;
        this.handleError(ex);
        return "";
      }
      return this.write(source);
    };
  };

  module.exports = task;

}).call(this);
