// Generated by CoffeeScript 1.6.3
(function() {
  var NpmPackageVersion, fs, log, path, types, updateVersionInAppFiles, updateVersionInData, utils;

  fs = require('fs');

  path = require('path');

  utils = require('./utils');

  log = require('./log');

  types = {};

  updateVersionInAppFiles = function(files, packages, value) {
    var data, file, key, pkg, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      log("- updating file <yellow>" + file + "</yellow> with version: <b>" + value + "</b>");
      data = fs.readFileSync(file, 'utf8');
      for (key in packages) {
        pkg = packages[key];
        data = updateVersionInData(data, value, pkg);
      }
      _results.push(fs.writeFileSync(file, data));
    }
    return _results;
  };

  updateVersionInData = function(data, value, pkg) {
    var ext, match, name, replace;
    ext = path.extname(pkg.target);
    name = path.basename(pkg.target, ext);
    match = new RegExp("=(\"|')(.*/?)" + name + "[^\"']?" + ext + "(\"|')");
    replace = "=$1$2" + name + "." + value + ext + "$3";
    if (data.match(match)) {
      log("> found target: " + pkg.target);
      return data.replace(match, replace);
    } else {
      return data;
    }
  };

  types["package"] = NpmPackageVersion = (function() {
    function NpmPackageVersion(app, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.app = app;
      this.files = utils.toArray(options.files).map(function(file) {
        return _this.app.applyRootDir(file)[0];
      });
    }

    NpmPackageVersion.prototype.getVersion = function() {
      return JSON.parse(fs.readFileSync('./package.json', 'utf8')).version;
    };

    NpmPackageVersion.prototype.update = function() {
      return updateVersionInAppFiles(this.files, this.app.packages, this.getVersion());
    };

    NpmPackageVersion.prototype.trim = function(url) {
      return url.replace(/^([^.]+).*(\.css|\.js)$/i, "$1$2");
    };

    return NpmPackageVersion;

  })();

  module.exports = types;

}).call(this);
