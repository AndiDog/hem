// Generated by CoffeeScript 1.7.0
(function() {
  var Module, Stitch, Utils, compilers, createModule, fs, modulerize, walk, _path;

  _path = require('path');

  fs = require('fs');

  compilers = require('./compilers');

  Utils = require('./utils');

  walk = function(type, modules, path, parent, result) {
    var child, module, stat, _i, _len, _ref;
    if (parent == null) {
      parent = path;
    }
    if (result == null) {
      result = [];
    }
    if (!fs.existsSync(path)) {
      return;
    }
    _ref = fs.readdirSync(path);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child = _path.join(path, child);
      stat = fs.statSync(child);
      if (stat.isDirectory()) {
        walk(type, modules, child, parent, result);
      } else {
        module = createModule(type, modules, child, parent);
        result.push(module);
      }
    }
    return result;
  };

  createModule = function(type, modules, child, parent) {
    var module;
    if (!modules[child]) {
      module = new Module(child, parent, type);
      if (module.valid() && module.compile()) {
        modules[child] = module;
      }
    }
    return modules[child];
  };

  modulerize = function(id, filename) {
    var baseName, dirName, ext, modName;
    if (filename == null) {
      filename = id;
    }
    ext = _path.extname(filename);
    dirName = _path.dirname(id);
    baseName = _path.basename(id, ext);
    if (dirName === baseName) {
      modName = baseName;
    } else {
      modName = _path.join(_path.dirname(id), _path.basename(id, ext));
    }
    return modName.replace(/\\/g, '/');
  };

  Stitch = (function() {
    Stitch.bundle = function(identifier, modules) {
      var context;
      context = {
        identifier: identifier,
        modules: modules
      };
      return Utils.tmpl("stitch", context);
    };

    function Stitch(paths, type) {
      var path;
      this.paths = paths != null ? paths : [];
      this.type = type != null ? type : 'js';
      this.paths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          _results.push(_path.resolve(path));
        }
        return _results;
      }).call(this);
      this.modules = {};
    }

    Stitch.prototype.bundle = function(indentifier) {
      return Stitch.bundle(identifier, this.resolve);
    };

    Stitch.prototype.join = function(separator) {
      var module;
      if (separator == null) {
        separator = "\n";
      }
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.resolve();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          module = _ref[_i];
          _results.push(module.compile());
        }
        return _results;
      }).call(this)).join(separator);
    };

    Stitch.prototype.resolve = function() {
      var path;
      return Utils.flatten((function() {
        var _i, _len, _ref, _results;
        _ref = this.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          _results.push(walk(this.type, this.modules, path));
        }
        return _results;
      }).call(this));
    };

    Stitch.prototype.clear = function(filename) {
      return delete modules[_path.resolve(filename)];
    };

    return Stitch;

  })();

  Module = (function() {
    function Module(filename, parent, type) {
      this.filename = filename;
      this.parent = parent;
      this.type = type;
      this.ext = _path.extname(this.filename).slice(1);
      this.id = modulerize(this.filename.replace(_path.join(this.parent, _path.sep), ''));
    }

    Module.prototype.compile = function() {
      return this.out || (this.out = compilers[this.ext](this.filename));
    };

    Module.prototype.valid = function() {
      return !!compilers[this.ext];
    };

    return Module;

  })();

  module.exports = Stitch;

}).call(this);
