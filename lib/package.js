// Generated by CoffeeScript 1.7.0
(function() {
  var Application, Dependency, Stitch, create, events, fs, log, path, uglifycss, uglifyjs, utils, versioning, _argv, _hem,
    __slice = [].slice;

  fs = require('fs-extra');

  path = require('path');

  uglifyjs = require('uglify-js');

  uglifycss = require('uglifycss');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  utils = require('./utils');

  events = require('./events');

  log = require('./log');

  versioning = require('./versioning');

  _hem = void 0;

  _argv = void 0;

  Application = (function() {
    function Application(name, config) {
      var baseConfig, defaults, err, key, packager, route, value, verType, _ref;
      if (config == null) {
        config = {};
      }
      this.name = name;
      this.route = config.route;
      this.root = config.root;
      if (config.extend) {
        try {
          baseConfig = utils.loadAsset('config/' + config.extend);
          defaults = utils.extend({}, baseConfig);
        } catch (_error) {
          err = _error;
          log.error("ERROR: Invalid 'extend' value provided: " + config.extend);
          process.exit(1);
        }
        config = utils.extend(defaults, config);
      }
      if (!this.root) {
        if (utils.isDirectory(this.name)) {
          this.root = this.name;
          this.route || (this.route = "/" + this.name);
        } else {
          this.root = "/";
          this.route || (this.route = "/");
        }
      }
      this["static"] = [];
      this.packages = [];
      _ref = config["static"];
      for (route in _ref) {
        value = _ref[route];
        this["static"].push({
          url: this.applyBaseRoute(route),
          path: this.applyRootDir(value)[0]
        });
      }
      for (key in config) {
        value = config[key];
        packager = void 0;
        if (key === 'js' || utils.endsWith(key, '.js')) {
          packager = JsPackage;
          value.name = key;
        } else if (key === 'css' || utils.endsWith(key, '.css')) {
          packager = CssPackage;
          value.name = key;
        }
        if (packager) {
          this.packages.push(new packager(this, value));
        }
      }
      if (config.test) {
        config.test.name = "test";
        this.packages.push(new TestPackage(this, config.test));
      }
      if (config.version) {
        verType = versioning[config.version.type];
        if (!verType) {
          log.errorAndExit("Incorrect type value for version configuration: (" + config.version.type + ")");
        }
        this.versioning = new verType(this, config.version);
      }
    }

    Application.prototype.getTestPackage = function() {
      var pkg, _i, _len, _ref;
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (pkg.constructor.name === "TestPackage") {
          return pkg;
        }
      }
    };

    Application.prototype.isMatchingRoute = function(route) {
      var pkg, _i, _len, _ref;
      if (this.versioning) {
        route = this.versioning.trim(route);
      }
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (route === pkg.route) {
          return pkg;
        }
      }
    };

    Application.prototype.unlink = function() {
      var pkg, _i, _len, _ref, _results;
      log("Removing application: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.unlink());
      }
      return _results;
    };

    Application.prototype.build = function() {
      var pkg, _i, _len, _ref, _results;
      log("Building application: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.build());
      }
      return _results;
    };

    Application.prototype.watch = function() {
      var dirs, pkg;
      log("Watching application: <green>" + this.name + "</green>");
      dirs = (function() {
        var _i, _len, _ref, _results;
        _ref = this.packages;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pkg = _ref[_i];
          _results.push(pkg.watch());
        }
        return _results;
      }).call(this);
      if (dirs.length) {
        return log.info("- Watching directories: <yellow>" + dirs + "</yellow>");
      } else {
        return log.info("- No directories to watch...");
      }
    };

    Application.prototype.version = function() {
      log("Versioning application: <green>" + this.name + "</green>");
      if (this.versioning) {
        return this.versioning.update();
      } else {
        return log.errorAndExit("ERROR: Versioning not enabled in slug.json");
      }
    };

    Application.prototype.applyRootDir = function(value) {
      var values;
      values = utils.toArray(value);
      values = values.map((function(_this) {
        return function(value) {
          if (utils.startsWith(value, "." + path.sep)) {
            return value;
          } else {
            return utils.cleanPath(_this.root, value);
          }
        };
      })(this));
      return values;
    };

    Application.prototype.applyBaseRoute = function() {
      var values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.route) {
        values.unshift(this.route);
      }
      return utils.cleanRoute.apply(utils, values);
    };

    return Application;

  })();

  create = function(name, config, hem, argv) {
    _hem || (_hem = hem);
    _argv || (_argv = argv);
    return new Application(name, config);
  };

  module.exports.create = create;

}).call(this);
