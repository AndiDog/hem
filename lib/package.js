// Generated by CoffeeScript 1.6.3
(function() {
  var Application, CssPackage, Dependency, JsPackage, Package, Stitch, TestPackage, argv, createApplication, fs, log, path, uglifycss, uglifyjs, utils, versioning,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs-extra');

  path = require('path');

  uglifyjs = require('uglify-js');

  uglifycss = require('uglifycss');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  utils = require('./utils');

  argv = require('./utils').ARGV;

  log = require('./log');

  versioning = require('./versioning');

  Application = (function() {
    function Application(name, config, hem) {
      var defaults, err, key, loadedDefaults, packager, route, value, verType, _ref;
      if (config == null) {
        config = {};
      }
      this.hem = hem;
      this.name = name;
      this.route = config.route;
      this.root = config.root;
      if (config.defaults) {
        try {
          loadedDefaults = utils.loadAsset('defaults/' + config.defaults);
          defaults = utils.extend({}, loadedDefaults);
        } catch (_error) {
          err = _error;
          log.error("ERROR: Invalid 'defaults' value provided: " + config.defaults);
          process.exit(1);
        }
        config = utils.extend(defaults, config);
      }
      if (!this.root) {
        if (utils.isDirectory(this.name)) {
          this.root = this.name;
          this.route || (this.route = "/" + this.name);
        } else {
          this.root = "/";
          this.route || (this.route = "/");
        }
      }
      this["static"] = [];
      this.packages = [];
      _ref = config["static"];
      for (route in _ref) {
        value = _ref[route];
        this["static"].push({
          url: this.applyBaseRoute(route),
          path: this.applyRootDir(value)[0]
        });
      }
      for (key in config) {
        value = config[key];
        packager = void 0;
        if (key === 'js' || utils.endsWith(key, '.js')) {
          packager = JsPackage;
          value.name = key;
        } else if (key === 'css' || utils.endsWith(key, '.css')) {
          packager = CssPackage;
          value.name = key;
        }
        if (packager) {
          this.packages.push(new packager(this, value));
        }
      }
      if (config.test) {
        config.test.name = "test";
        this.packages.push(new TestPackage(this, config.test));
      }
      if (config.version) {
        verType = versioning[config.version.type];
        if (!verType) {
          log.errorAndExit("Incorrect type value for version configuration: (" + config.version.type + ")");
        }
        this.versioning = new verType(this, config.version);
      }
    }

    Application.prototype.getTestPackage = function() {
      var pkg, _i, _len, _ref;
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (pkg.constructor.name === "TestPackage") {
          return pkg;
        }
      }
    };

    Application.prototype.isMatchingRoute = function(route) {
      var pkg, _i, _len, _ref;
      if (this.versioning) {
        route = this.versioning.trim(route);
      }
      _ref = this.packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (route === pkg.route) {
          return pkg;
        }
      }
    };

    Application.prototype.unlink = function() {
      var pkg, _i, _len, _ref, _results;
      log("Removing application targets: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.unlink());
      }
      return _results;
    };

    Application.prototype.build = function() {
      var pkg, _i, _len, _ref, _results;
      log("Building application targets: <green>" + this.name + "</green>");
      _ref = this.packages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _results.push(pkg.build());
      }
      return _results;
    };

    Application.prototype.watch = function() {
      var dirs, pkg;
      log("Watching application: <green>" + this.name + "</green>");
      dirs = (function() {
        var _i, _len, _ref, _results;
        _ref = this.packages;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pkg = _ref[_i];
          _results.push(pkg.watch());
        }
        return _results;
      }).call(this);
      if (dirs.length) {
        return log.info("- Watching directories: <yellow>" + dirs + "</yellow>");
      } else {
        return log.info("- No directories to watch...");
      }
    };

    Application.prototype.version = function() {
      log("Versioning application: <green>" + this.name + "</green>");
      if (this.versioning) {
        return this.versioning.update();
      } else {
        return log.errorAndExit("ERROR: Versioning not enabled in slug.json");
      }
    };

    Application.prototype.applyRootDir = function(value) {
      var values,
        _this = this;
      values = utils.toArray(value);
      values = values.map(function(value) {
        if (utils.startsWith(value, "." + path.sep)) {
          return value;
        } else {
          return utils.cleanPath(_this.root, value);
        }
      });
      return values;
    };

    Application.prototype.applyBaseRoute = function() {
      var values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.route) {
        values.unshift(this.route);
      }
      return utils.cleanRoute.apply(utils, values);
    };

    return Application;

  })();

  Package = (function() {
    function Package(app, config) {
      var regexp, route, targetFile, targetUrl, _i, _len, _ref;
      this.app = app;
      this.name = config.name;
      this.src = this.app.applyRootDir(config.src || "");
      this.target = this.app.applyRootDir(config.target || "")[0];
      if (utils.isDirectory(this.target)) {
        if (this.name === this.ext) {
          targetFile = this.app.name;
        } else {
          targetFile = this.name;
        }
        this.target = utils.cleanPath(this.target, targetFile);
      }
      if (!utils.endsWith(this.target, "." + this.ext)) {
        this.target = "" + this.target + "." + this.ext;
      }
      if (config.route) {
        if (utils.startsWith(this.target, "/")) {
          this.route = config.route;
        } else {
          this.route = this.app.applyBaseRoute(config.route);
        }
      } else {
        _ref = this.app["static"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          route = _ref[_i];
          if (!this.route) {
            if (utils.startsWith(this.target, route.path)) {
              regexp = new RegExp("^" + (route.path.replace(/\\/g, "\\\\")) + "(\\\\|\/)?");
              targetUrl = this.target.replace(regexp, "");
              this.route = utils.cleanRoute(route.url, targetUrl);
            }
          }
        }
      }
      if (argv.command === "server" && !this.route) {
        log.errorAndExit("Unable to determine route for <yellow>" + this.target + "</yellow>");
      }
    }

    Package.prototype.handleCompileError = function(ex) {
      log.error(ex.message);
      if (ex.path) {
        log.error(ex.path);
      }
      switch (argv.command) {
        case "server" || "watch":
          return "console.log(\"HEM compile ERROR: " + ex + "\n" + ex.path + "\");";
        default:
          return process.exit(1);
      }
    };

    Package.prototype.unlink = function() {
      if (fs.existsSync(this.target)) {
        log.info("- removing <yellow>" + this.target + "</yellow>");
        return fs.unlinkSync(this.target);
      }
    };

    Package.prototype.build = function(write) {
      var dirname, extra, source;
      if (write == null) {
        write = true;
      }
      extra = (argv.compress && " <b>--using compression</b>") || "";
      log("- Building target: <yellow>" + this.target + "</yellow>" + extra);
      source = this.compile();
      if (source && write) {
        dirname = path.dirname(this.target);
        if (!fs.existsSync(dirname)) {
          fs.mkdirsSync(dirname);
        }
        fs.writeFileSync(this.target, source);
      }
      return source;
    };

    Package.prototype.watch = function() {
      var dir, dirs, fileOrDir, watchOptions, _i, _j, _len, _len1, _ref,
        _this = this;
      watchOptions = {
        persistent: true,
        interval: 1000,
        ignoreDotFiles: true
      };
      dirs = [];
      _ref = this.getWatchedDirs();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fileOrDir = _ref[_i];
        if (!fs.existsSync(fileOrDir)) {
          continue;
        }
        if (utils.isDirectory(fileOrDir)) {
          dirs.push(fileOrDir);
        } else {
          dirs.push(path.dirname(fileOrDir));
        }
      }
      dirs = utils.removeDuplicateValues(dirs);
      for (_j = 0, _len1 = dirs.length; _j < _len1; _j++) {
        dir = dirs[_j];
        require('watch').watchTree(dir, watchOptions, function(file, curr, prev) {
          if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
            return _this.build();
          }
        });
      }
      return dirs;
    };

    Package.prototype.getWatchedDirs = function() {
      return this.src;
    };

    Package.prototype.ext = "";

    return Package;

  })();

  JsPackage = (function(_super) {
    __extends(JsPackage, _super);

    function JsPackage(app, config) {
      JsPackage.__super__.constructor.call(this, app, config);
      this.commonjs = config.commonjs || 'require';
      this.libs = this.app.applyRootDir(config.libs || []);
      this.after = utils.arrayToString(config.after || "");
      this.modules = utils.toArray(config.modules || []);
    }

    JsPackage.prototype.compile = function() {
      var ex, result;
      try {
        result = [this.compileLibs(), this.compileModules(), this.after].join("\n");
        if (argv.compress) {
          result = uglifyjs.minify(result, {
            fromString: true
          }).code;
        }
        return result;
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    JsPackage.prototype.compileModules = function() {
      var _modules, _stitch;
      this.depend || (this.depend = new Dependency(this.modules));
      _stitch = new Stitch(this.src);
      _modules = this.depend.resolve().concat(_stitch.resolve());
      if (_modules) {
        return _stitch.template(this.commonjs, _modules);
      } else {
        return "";
      }
    };

    JsPackage.prototype.compileLibs = function(files, parentDir) {
      var dir, file, results, slash, stats, _i, _len, _ref;
      if (files == null) {
        files = this.libs;
      }
      if (parentDir == null) {
        parentDir = "";
      }
      results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (utils.endsWith(file, ";")) {
          results.join(file);
        } else {
          slash = parentDir === "" ? "" : path.sep;
          file = parentDir + slash + file;
          if (fs.existsSync(file)) {
            stats = fs.lstatSync(file);
            if (stats.isDirectory()) {
              dir = fs.readdirSync(file);
              results.push(this.compileLibs(dir, file));
            } else if (stats.isFile() && ((_ref = path.extname(file)) === '.js' || _ref === '.coffee')) {
              results.push(fs.readFileSync(file, 'utf8'));
            }
          }
        }
      }
      return results.join("\n");
    };

    JsPackage.prototype.getWatchedDirs = function() {
      return this.src.concat(this.libs);
    };

    JsPackage.prototype.ext = "js";

    return JsPackage;

  })(Package);

  TestPackage = (function(_super) {
    __extends(TestPackage, _super);

    function TestPackage(app, config) {
      TestPackage.__super__.constructor.call(this, app, config);
      this.depends = utils.toArray(config.depends);
      this.runner = config.runner;
      this.framework = config.framework;
      this.testHome = path.dirname(this.target);
    }

    TestPackage.prototype.build = function() {
      this.createTestFiles();
      return TestPackage.__super__.build.call(this);
    };

    TestPackage.prototype.getAllTestTargets = function() {
      var dep, depapp, homeRoute, pkg, pth, targets, url, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      targets = [];
      homeRoute = path.dirname(this.route);
      _ref = this.depends;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dep = _ref[_i];
        _ref1 = this.app.hem.allApps;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          depapp = _ref1[_j];
          if (depapp.name === dep) {
            _ref2 = depapp.packages;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              pkg = _ref2[_k];
              if (pkg.constructor.name === "JsPackage") {
                url = path.relative(homeRoute, pkg.route);
                pth = path.relative(this.testHome, pkg.target);
                targets.push({
                  url: url,
                  path: pth
                });
              }
            }
          }
        }
      }
      _ref3 = this.app.packages;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        pkg = _ref3[_l];
        if (pkg.constructor.name === "JsPackage") {
          url = path.relative(homeRoute, pkg.route);
          pth = path.relative(this.testHome, pkg.target);
          targets.push({
            url: url,
            path: pth
          });
        }
      }
      url = path.relative(homeRoute, pkg.route);
      pth = path.relative(this.testHome, pkg.target);
      targets.push({
        url: url,
        path: pth
      });
      return targets;
    };

    TestPackage.prototype.getFrameworkFiles = function() {
      var file, frameworkPath, targets, url, _i, _len, _ref, _ref1;
      targets = [];
      frameworkPath = path.resolve(__dirname, "../assets/testing/" + this.framework);
      _ref = fs.readdirSync(frameworkPath);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if ((_ref1 = path.extname(file)) === ".js" || _ref1 === ".css") {
          url = "" + this.framework + "/" + file;
          targets.push({
            url: url,
            path: url
          });
        }
      }
      return targets;
    };

    TestPackage.prototype.createTestFiles = function() {
      var file, filepath, files, frameworkPath, indexFile, template, _i, _len, _ref, _ref1, _results;
      indexFile = path.resolve(this.testHome, 'index.html');
      files = [];
      files.push.apply(files, this.getFrameworkFiles());
      files.push.apply(files, this.getAllTestTargets());
      template = utils.tmpl("testing/index", {
        commonjs: this.commonjs,
        files: files
      });
      fs.outputFileSync(indexFile, template);
      frameworkPath = path.resolve(__dirname, "../assets/testing/" + this.framework);
      _ref = fs.readdirSync(frameworkPath);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if ((_ref1 = path.extname(file)) === ".js" || _ref1 === ".css") {
          filepath = path.resolve(this.testHome, "" + this.framework + "/" + file);
          _results.push(utils.copyFile(path.resolve(frameworkPath, file), filepath));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return TestPackage;

  })(JsPackage);

  CssPackage = (function(_super) {
    __extends(CssPackage, _super);

    function CssPackage(app, config) {
      CssPackage.__super__.constructor.call(this, app, config);
    }

    CssPackage.prototype.compile = function() {
      var ex, file, fileOrDir, output, requireCss, result, _i, _j, _len, _len1, _ref, _ref1;
      try {
        output = [];
        requireCss = function(filepath) {
          filepath = require.resolve(path.resolve(filepath));
          delete require.cache[filepath];
          return require(filepath);
        };
        _ref = this.src;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fileOrDir = _ref[_i];
          if (utils.isDirectory(fileOrDir)) {
            _ref1 = fs.readdirSync(fileOrDir);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              file = _ref1[_j];
              if (!require.extensions[path.extname(file)]) {
                continue;
              }
              file = path.resolve(fileOrDir, file);
              output.push(requireCss(file));
            }
          } else {
            output.push(requireCss(fileOrDir));
          }
        }
        result = output.join("\n");
        if (argv.compress) {
          result = uglifycss.processString(result);
        }
        return result;
      } catch (_error) {
        ex = _error;
        return this.handleCompileError(ex);
      }
    };

    CssPackage.prototype.ext = "css";

    return CssPackage;

  })(Package);

  createApplication = function(name, config, hem) {
    return new Application(name, config, hem);
  };

  module.exports.createApplication = createApplication;

}).call(this);
