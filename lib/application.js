// Generated by CoffeeScript 1.7.0
(function() {
  var Application, Events, Job, Log, Src, fs, glob, path, uglifyjs, utils,
    __slice = [].slice;

  fs = require('fs-extra');

  path = require('path');

  uglifyjs = require('uglify-js');

  glob = require('globule');

  utils = require('./utils');

  Events = require('./events');

  Log = require('./log');

  Job = require('./job');

  Application = (function() {
    function Application(name, config, argv) {
      var baseConfig, defaults, err, job, jobname, route, value, _ref, _ref1;
      this.argv = argv;
      this.name = name;
      if (config.base) {
        try {
          baseConfig = utils.loadAsset('config/' + config.base);
          defaults = utils.extend({}, baseConfig);
        } catch (_error) {
          err = _error;
          Log.errorAndExit("Invalid 'base' value provided: " + config.base);
        }
        config = utils.extend(defaults, config);
      }
      this.route = config.route;
      this.root = config.root;
      this["static"] = [];
      this.jobs = {};
      this.depends = utils.toArray(config.depends || "");
      if (!this.root) {
        if (utils.isDirectory(this.name)) {
          this.root = this.name;
          this.route || (this.route = "/" + this.name);
        } else {
          this.root = "/";
          this.route || (this.route = "/");
        }
      }
      _ref = config["static"];
      for (route in _ref) {
        value = _ref[route];
        this["static"].push({
          url: this.applyRoute(route),
          path: this.applyRoot(value)[0]
        });
      }
      _ref1 = config.jobs;
      for (jobname in _ref1) {
        value = _ref1[jobname];
        job = new Job(this, jobname, value);
        if (job.tasks.length > 0) {
          this.jobs[jobname] = job;
        }
      }
    }

    Application.prototype.isMatchingRoute = function(route) {
      var item, result, task, _i, _j, _len, _len1, _ref;
      _ref = this.jobs.build.tasks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (!(route === task.route)) {
          continue;
        }
        result = this.jobs.build.run(task.id);
        if (Array.isArray(result)) {
          for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
            item = result[_j];
            if (route === item.result) {
              return item;
            }
          }
        } else {
          result;
        }
      }
    };

    Application.prototype.watch = function(jobname) {
      var job;
      job = this.jobs[jobname];
      if (job) {
        return job.watch();
      }
    };

    Application.prototype.exec = function(jobname) {
      var job;
      job = this.jobs[jobname];
      if (job) {
        return job.run();
      } else {
        return Log.errorAndExit("ERROR: " + jobname + " job has not been configured.");
      }
    };

    Application.prototype.clean = function() {
      return this.exec('clean');
    };

    Application.prototype.build = function() {
      return this.exec('build');
    };

    Application.prototype.deploy = function() {
      return this.exec('deploy');
    };

    Application.prototype.test = function() {
      return this.exec('test');
    };

    Application.prototype.applyRoot = function(value, returnArray) {
      var values;
      if (returnArray == null) {
        returnArray = true;
      }
      values = utils.toArray(value);
      values = values.map((function(_this) {
        return function(value) {
          if (utils.startsWith(value, "." + path.sep)) {
            return value;
          } else {
            return utils.cleanPath(_this.root, value);
          }
        };
      })(this));
      if (returnArray) {
        return values;
      } else {
        return values[0];
      }
    };

    Application.prototype.applyRoute = function() {
      var values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.route) {
        values.unshift(this.route);
      }
      return utils.cleanRoute.apply(utils, values);
    };

    return Application;

  })();

  Src = (function() {
    function Src(options) {
      if (typeof options === "string") {
        options = {
          src: options
        };
      }
      this.src = options.src;
      this.srcBase = options.srcBase;
      this.destBase = options.destBase;
      this.commonjs = options.commonjs;
    }

    Src.prototype.walk = function() {
      return this.files || (this.files = glob.find(this.src));
    };

    Src.prototype.contains = function(file) {};

    Src.prototype.mapping = function(destBase) {};

    return Src;

  })();

  module.exports.create = function(name, config, argv) {
    return new Application(name, config, argv);
  };

}).call(this);
