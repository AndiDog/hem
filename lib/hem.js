// Generated by CoffeeScript 1.6.3
(function() {
  var Hem, application, argv, compilers, fs, help, log, optimist, path, server, testing, utils,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  optimist = require('optimist');

  argv = optimist.usage(['usage:\nhem COMMAND', '    server  :start a dynamic development server', '    build   :serialize application to disk', '    watch   :build & watch disk for changes', '    test    :build and run tests', '    clean   :clean compiled targets', '    version :version the application files', '    check   :check slug file values'].join("\n")).alias('p', 'port').describe('p', ':hem server port').alias('c', 'compress').describe('c', ':all compilations are compressed/minified').alias('w', 'watch').describe('w', ':watch files when running tests').alias('s', 'slug').describe('s', ':run hem using a specified slug file').alias('n', 'nocolors').describe('n', ':disable color in console output').alias('v', 'verbose').describe('v', ':make hem more talkative(verbose)').argv;

  argv.command = argv._[0];

  argv.targets = argv._.slice(1);

  if (!!argv.nocolors) {
    require("sty").disable();
  }

  log = require('./log');

  log.VERBOSE = argv.v = !!argv.v;

  utils = require('./utils');

  utils.ARGV = argv;

  compilers = require('./compilers');

  server = require('./server');

  testing = require('./test');

  application = require('./package');

  help = function() {
    var _ref;
    log("<b>HEM</b> Version: <green>" + ((_ref = require('../package.json')) != null ? _ref.version : void 0) + "</green>\n");
    optimist.showHelp();
    return process.exit();
  };

  Hem = (function() {
    Hem.exec = function(command, options) {
      return (new this(options)).exec(command);
    };

    Hem.middleware = function(slug) {
      var hem;
      hem = new Hem(slug);
      return server.middleware(hem);
    };

    Hem.compilers = compilers;

    Hem.events = utils.events;

    Hem.defaults = {
      hem: {
        port: 9294,
        host: "localhost"
      }
    };

    Hem.prototype.options = {};

    Hem.prototype.apps = [];

    Hem.prototype.allApps = [];

    Hem.prototype.home = process.cwd();

    function Hem(options) {
      var config, name, slug, _base, _base1, _base2, _ref;
      switch (typeof options) {
        case "string":
          slug = options;
          break;
        case "object":
          this.options = options;
          break;
        default:
          slug || (slug = argv.slug || 'slug');
      }
      if (slug) {
        this.options = this.readSlug(slug);
      }
      (_base = this.options).hem || (_base.hem = {});
      (_base1 = this.options.hem).port || (_base1.port = Hem.defaults.hem.port);
      (_base2 = this.options.hem).host || (_base2.host = Hem.defaults.hem.host);
      if (argv.port) {
        this.options.hem.port = argv.port;
      }
      _ref = this.options;
      for (name in _ref) {
        config = _ref[name];
        if (name === "hem") {
          continue;
        }
        this.allApps.push(application.createApplication(name, config, this));
      }
    }

    Hem.prototype.server = function() {
      var app, value;
      value = "http://" + (this.options.hem.host || "*") + ":" + this.options.hem.port;
      log("Starting Server at <blue>" + value + "</blue>");
      app = server.start(this);
      return Hem.events.emit("server-start", app);
    };

    Hem.prototype.clean = function() {
      var app, _i, _len, _ref, _results;
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        _results.push(app.unlink());
      }
      return _results;
    };

    Hem.prototype.build = function() {
      this.clean();
      return this.buildApps();
    };

    Hem.prototype.version = function() {
      var app, _i, _len, _ref, _results;
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        _results.push(app.version());
      }
      return _results;
    };

    Hem.prototype.watch = function() {
      var app, _i, _len, _ref, _results;
      this.buildApps();
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        _results.push(app.watch());
      }
      return _results;
    };

    Hem.prototype.test = function() {
      var testOptions;
      testOptions = {
        basePath: this.home
      };
      if (argv.watch) {
        this.watch();
        testOptions.singleRun = false;
      } else {
        this.buildApps();
        testOptions.singleRun = true;
      }
      return testing.run(this.apps, this.options);
    };

    Hem.prototype.check = function() {
      var app, inspect, printOptions, _i, _len, _ref, _results;
      printOptions = {
        showHidden: false,
        colors: !argv.nocolors,
        depth: null
      };
      inspect = require('util').inspect;
      log("> Configuration for <green>hem</green>:");
      console.log(inspect(this.options.hem, printOptions));
      log("");
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        log("> Configuration values for <green>" + app.name + "</green>:");
        console.log(inspect(app, printOptions));
        _results.push(log(""));
      }
      return _results;
    };

    Hem.prototype.exec = function(command) {
      if (command == null) {
        command = argv.command;
      }
      if (!this[command]) {
        return help();
      }
      this.apps = this.getTargetApps();
      return this[command]();
    };

    Hem.prototype.readSlug = function(slug) {
      var error, slugPath;
      slugPath = path.resolve(slug);
      try {
        slugPath = require.resolve(slugPath);
      } catch (_error) {
        error = _error;
        log.errorAndExit("Couldn't find slug file " + slugPath + ". " + error);
      }
      Hem.home = path.dirname(slugPath);
      try {
        delete require.cache[slugPath];
        slug = require(slugPath);
        return (typeof slug === "function" ? slug(Hem) : void 0) || slug;
      } catch (_error) {
        error = _error;
        return log.errorAndExit("Couldn't load slug file " + slugPath + ". " + error);
      }
    };

    Hem.prototype.getTargetApps = function(targets) {
      var app, targetAll, _i, _len, _ref, _ref1, _results;
      if (targets == null) {
        targets = argv.targets;
      }
      targetAll = targets.length === 0;
      _ref = this.allApps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        if ((_ref1 = app.name, __indexOf.call(targets, _ref1) >= 0) || targetAll) {
          _results.push(app);
        }
      }
      return _results;
    };

    Hem.prototype.buildApps = function() {
      var app, _i, _len, _ref, _results;
      _ref = this.apps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        app = _ref[_i];
        _results.push(app.build());
      }
      return _results;
    };

    return Hem;

  })();

  module.exports = Hem;

}).call(this);
