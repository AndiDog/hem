// Generated by CoffeeScript 1.6.3
(function() {
  var phantom;

  phantom = require('phantom');

  module.exports = function(filepath) {
    return phantom.create(function(ph) {
      var waitFor;
      waitFor = (function() {
        var getTime;
        getTime = function() {
          return (new Date).getTime();
        };
        return function(test, doIt, duration) {
          var finish, int, looop, start;
          duration || (duration = 10000);
          start = getTime();
          finish = start + duration;
          int = void 0;
          looop = function() {
            var testCallback, time, timeout;
            time = getTime();
            timeout = time >= finish;
            testCallback = function(condition) {
              if (condition) {
                clearInterval(int);
                doIt(time - start);
              }
              if (timeout && !condition) {
                console.log("ERROR - Timeout for page condition.");
                clearInterval(int);
                return ph.exit();
              }
            };
            return test(testCallback);
          };
          return int = setInterval(looop, 1000);
        };
      })();
      return ph.createPage(function(page) {
        var _page;
        _page = page;
        _page.set('onConsoleMessage', function(msg) {
          return console.log(msg);
        });
        _page.set('onCallback', function(msg) {
          if (msg) {
            return console.log(msg);
          }
        });
        return _page.open(filepath, function(status) {
          var check, evalTests;
          if (status !== "success") {
            console.log("Cannot open URL");
            ph.exit();
          }
          check = function(callback) {
            return _page.evaluate(function() {
              var _ref;
              return (_ref = document.querySelector(".duration")) != null ? _ref.innerText : void 0;
            }, callback);
          };
          evalTests = function(time) {
            return _page.evaluate(function(formatter) {
              var errorsOnly, ex, fails, format, formatColors, passed, printSpecs, printSuites;
              formatColors = (function() {
                var desc, indent, tick;
                indent = function(level) {
                  var i, ret, _i;
                  ret = '';
                  for (i = _i = 0; 0 <= level ? _i <= level : _i >= level; i = 0 <= level ? ++_i : --_i) {
                    ret = ret + '  ';
                  }
                  return ret;
                };
                tick = function(el) {
                  if ($(el).is('.passed')) {
                    return '\x1B[32m✓\x1B[0m';
                  } else {
                    return '\x1B[31m✖';
                  }
                };
                desc = function(el, strong) {
                  var ret;
                  strong || (strong = false);
                  ret = $(el).find('> a.description');
                  return ret = strong && '\x1B[1m' + ret[0].text || ret[0].text;
                };
                return function(el, level, strong) {
                  var results;
                  if (typeof el === 'number') {
                    results = "-------------------------------------\n";
                    results += "\x1B[32m✓\x1B[0m\x1B[1m Passed: \x1B[0m" + el;
                    if (level > 0) {
                      results += "\n\x1B[31m✖ \x1B[0m\x1B[1mFailed: \x1B[0m" + level;
                    }
                    return results;
                  } else {
                    return '\x1B[1m' + indent(level) + tick(el) + ' ' + desc(el, strong);
                  }
                };
              })();
              errorsOnly = (function() {
                var desc, indent, tick;
                indent = function(level) {
                  var i, ret, _i;
                  ret = '';
                  for (i = _i = 0; 0 <= level ? _i <= level : _i >= level; i = 0 <= level ? ++_i : --_i) {
                    ret = ret + '  ';
                  }
                  return ret;
                };
                desc = function(el) {
                  return $(el).find('> a.description')[0].text;
                };
                tick = function(el) {
                  var _ref;
                  return (_ref = $(el).is('.passed')) != null ? _ref : {
                    '✓ ': '✖ '
                  };
                };
                return function(el, level, strong) {
                  if (typeof el === 'number') {
                    return "Passed: " + el + ", Failed: " + level;
                  } else {
                    if (!$(el).is(".passed")) {
                      return indent(level) + tick(el) + desc(el);
                    } else {
                      return null;
                    }
                  }
                };
              })();
              try {
                format = eval(formatter || "formatColors");
              } catch (_error) {
                ex = _error;
                format = formatColors;
              }
              printSuites = function(root, level) {
                level || (level = 0);
                return $(root).find('div.suite').each(function(i, el) {
                  var output;
                  output = format(el, level, true);
                  if ($(el).parents('div.suite').length === level) {
                    if (output) {
                      window.callPhantom(output);
                    }
                    printSpecs(el, level + 1);
                  }
                  return printSuites(el, level + 1);
                });
              };
              printSpecs = function(root, level) {
                level || (level = 0);
                return $(root).find('> .specSummary').each(function(i, el) {
                  var output;
                  output = format(el, level);
                  if (output) {
                    return window.callPhantom(output);
                  }
                });
              };
              printSuites($('div.jasmine_reporter'));
              fails = document.body.querySelectorAll('div.jasmine_reporter div.specSummary.failed');
              passed = document.body.querySelectorAll('div.jasmine_reporter div.specSummary.passed');
              return window.callPhantom(format(passed.length, fails.length));
            }, function() {
              return ph.exit();
            });
          };
          return waitFor(check, evalTests);
        });
      });
    });
  };

}).call(this);
