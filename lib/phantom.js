// Generated by CoffeeScript 1.6.3
(function() {
  var jasmine_checkTestResults, jasmine_parseTestResults, phantom, reporters, run, waitFor;

  phantom = require('phantom');

  reporters = {
    errorsOnly: function(el, level, strong) {
      var desc, indent, tick;
      indent = function(level) {
        var i, ret, _i;
        ret = '';
        for (i = _i = 0; 0 <= level ? _i <= level : _i >= level; i = 0 <= level ? ++_i : --_i) {
          ret = ret + '  ';
        }
        return ret;
      };
      desc = function(el) {
        return $(el).find('> a.description')[0].text;
      };
      tick = function(el) {
        if ($(el).is('.passed')) {
          return '✓ ';
        } else {
          return '✖ ';
        }
      };
      if (typeof el === 'number') {
        return "Passed: " + el + ", Failed: " + level;
      } else if (!$(el).is(".passed")) {
        return indent(level) + tick(el) + desc(el);
      }
    },
    silent: function() {
      return "";
    },
    passOrFail: function(el, level, strong) {
      if (typeof el === 'number') {
        return "Passed: " + el + ", Failed: " + level;
      }
    },
    formatColors: function(el, level, strong) {
      var desc, indent, results, tick;
      indent = function(level) {
        var i, ret, _i;
        ret = '';
        for (i = _i = 0; 0 <= level ? _i <= level : _i >= level; i = 0 <= level ? ++_i : --_i) {
          ret = ret + '  ';
        }
        return ret;
      };
      tick = function(el) {
        if ($(el).is('.passed')) {
          return '\x1B[32m✓\x1B[0m';
        } else {
          return '\x1B[31m✖';
        }
      };
      desc = function(el, strong) {
        var ret;
        if (strong == null) {
          strong = false;
        }
        ret = $(el).find('> a.description');
        return ret = strong && '\x1B[1m' + ret[0].text || ret[0].text;
      };
      if (typeof el === 'number') {
        results = "-------------------------------------\n";
        results += "\x1B[32m✓\x1B[0m\x1B[1m Passed: \x1B[0m" + el;
        if (level > 0) {
          results += "\n\x1B[31m✖ \x1B[0m\x1B[1mFailed: \x1B[0m" + level;
        }
        return results;
      } else {
        return '\x1B[1m' + indent(level) + tick(el) + ' ' + desc(el, strong);
      }
    }
  };

  waitFor = (function() {
    var getTime;
    getTime = function() {
      return (new Date).getTime();
    };
    return function(test, doIt, duration) {
      var finish, int, looop, start;
      duration || (duration = 6000);
      start = getTime();
      finish = start + duration;
      int = void 0;
      looop = function() {
        var testCallback, time, timeout;
        time = getTime();
        timeout = time >= finish;
        testCallback = function(condition) {
          if (condition) {
            clearInterval(int);
            doIt(time - start);
          }
          if (timeout && !condition) {
            console.log("ERROR - Timeout for page condition.");
            clearInterval(int);
            return doIt(0);
          }
        };
        return test(testCallback);
      };
      return int = setInterval(looop, 1000);
    };
  })();

  jasmine_parseTestResults = function(report) {
    var fails, passed, printSpecs, printSuites;
    eval("report = " + report);
    printSuites = function(root, level) {
      level || (level = 0);
      return $(root).find('div.suite').each(function(i, el) {
        var output;
        output = report(el, level, true);
        if ($(el).parents('div.suite').length === level) {
          if (output) {
            window.callPhantom(output);
          }
          printSpecs(el, level + 1);
        }
        return printSuites(el, level + 1);
      });
    };
    printSpecs = function(root, level) {
      level || (level = 0);
      return $(root).find('> .specSummary').each(function(i, el) {
        var output;
        output = report(el, level);
        if (output) {
          return window.callPhantom(output);
        }
      });
    };
    printSuites($('div.jasmine_reporter'));
    fails = document.body.querySelectorAll('div.jasmine_reporter div.specSummary.failed').length;
    passed = document.body.querySelectorAll('div.jasmine_reporter div.specSummary.passed').length;
    window.callPhantom(report(passed, fails));
    return {
      passed: passed,
      fails: fails
    };
  };

  jasmine_checkTestResults = function(page) {
    return function(checkComplete) {
      var isCheckComplete;
      isCheckComplete = function() {
        var _ref;
        return (_ref = document.querySelector(".duration")) != null ? _ref.innerText : void 0;
      };
      return page.evaluate(isCheckComplete, checkComplete);
    };
  };

  run = function(filepath, options, callback) {
    return phantom.create(function(ph) {
      return ph.createPage(function(page) {
        page.set('onConsoleMessage', function(msg) {
          return console.log(msg);
        });
        page.set('onCallback', function(msg) {
          if (msg) {
            return console.log(msg);
          }
        });
        return page.open(filepath, function(status) {
          var checkTestResults, complete, evalTestResults, parseTestResults, reporter;
          if (status !== "success") {
            console.log("Cannot open URL");
            ph.exit();
          }
          checkTestResults = jasmine_checkTestResults(page);
          parseTestResults = jasmine_parseTestResults;
          complete = function(results) {
            ph.exit();
            return typeof callback === "function" ? callback(results) : void 0;
          };
          reporter = reporters[options.output];
          evalTestResults = function(time) {
            if (time > 0) {
              return page.evaluate(parseTestResults, complete, new String(reporter));
            } else {
              return ph.exit();
            }
          };
          return waitFor(checkTestResults, evalTestResults);
        });
      });
    });
  };

  module.exports.run = run;

  module.exports.reporters = reporters;

}).call(this);
