// Generated by CoffeeScript 1.6.3
(function() {
  var async, createKarmaFileList, events, fs, log, path, phantom, run, runBrowser, runKarma, runPhantom, utils;

  fs = require('fs');

  path = require('path');

  log = require('./log');

  utils = require('./utils');

  events = require('./events');

  phantom = require('./phantom');

  async = require('async');

  run = function(apps, options) {
    var runTests;
    switch (options.runner) {
      case "phantom":
        runTests = phantom.run ? runPhantom : runBrowser;
        break;
      case "karma":
        runTests = runKarma;
        break;
      case "browser":
        runTests = runBrowser;
        break;
      default:
        log.errorAndExit("Invalid or unset test runner value: <yellow>" + options.runner + "</yellow>");
    }
    return runTests(apps, options);
  };

  runBrowser = function(apps, options, done) {
    var app, open, q, task, taskObject, tasks, testFile, testName, _i, _len, _results;
    open = require("open");
    tasks = {};
    for (_i = 0, _len = apps.length; _i < _len; _i++) {
      app = apps[_i];
      testName = app.name;
      testFile = app.getTestPackage().getTestIndexFile();
      tasks[testName] = (function(testFile) {
        return function(done) {
          open(testFile);
          return done();
        };
      })(testFile);
    }
    if (options.singleRun) {
      return async.series(tasks);
    } else {
      q = async.queue((function(task, callback) {
        return task(callback);
      }), 1);
      _results = [];
      for (task in tasks) {
        taskObject = tasks[task];
        _results.push(events.on("watch", function(app, pkg, file) {
          return q.push(tasks[app.name]);
        }));
      }
      return _results;
    }
  };

  runPhantom = function(apps, options, done) {
    var app, q, task, taskObject, tasks, testFile, testName, testPort, _i, _len, _results;
    options.output || (options.output = "passOrFail");
    tasks = {};
    for (_i = 0, _len = apps.length; _i < _len; _i++) {
      app = apps[_i];
      testName = app.name;
      testFile = app.getTestPackage().getTestIndexFile();
      testPort = 12300 + Object.keys(tasks).length;
      tasks[testName] = (function(testName, testFile, testPort) {
        return function(done) {
          log("Testing application targets: <green>" + testName + "</green>");
          return phantom.run(testFile, options, function(results) {
            if (results.error) {
              log.error(results.error);
            }
            return done(null, results);
          }, testPort);
        };
      })(testName, testFile, testPort);
    }
    if (options.singleRun) {
      return async.series(tasks, function(err, results) {
        var exitCode, name, result;
        exitCode = 0;
        for (name in results) {
          result = results[name];
          exitCode += result.failed && result.failed || 0;
          exitCode += result.error && 1 || 0;
        }
        return process.exit(exitCode);
      });
    } else {
      q = async.queue((function(task, callback) {
        return task(callback);
      }), 1);
      _results = [];
      for (task in tasks) {
        taskObject = tasks[task];
        _results.push(events.on("watch", function(app, pkg, file) {
          return q.push(tasks[app.name]);
        }));
      }
      return _results;
    }
  };

  runKarma = function(app, options) {
    var callback, testConfig;
    if (options == null) {
      options = {};
    }
    testConfig = fs.existsSync(options.config) && fs.realpathSync(options.config);
    testConfig || (testConfig = {
      singleRun: options.singleRun || true,
      basePath: options.basePath,
      reporters: [options.output || 'progress'],
      logLevel: 'info',
      frameworks: [options.framework],
      browsers: options.browser && options.browser.split(/[ ,]+/) || ['PhantomJS'],
      files: createKarmaFileList(app)
    });
    callback = function(exitCode) {
      if (options.singleRun) {
        return process.exit(exitCode);
      }
    };
    return require('karma').server.start(testConfig, callback);
  };

  createKarmaFileList = function(app) {};

  module.exports.run = run;

  module.exports.phantom = phantom;

}).call(this);
