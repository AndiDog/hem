// Generated by CoffeeScript 1.7.0
(function() {
  var Events, Job, Log, Stitch, TaskWrapper, Utils, fs, gaze, path, uglifycss, uglifyjs;

  fs = require('fs-extra');

  gaze = require('gaze');

  path = require('path');

  Utils = require('./utils');

  Events = require('./events');

  Log = require('./log');

  Stitch = require('./stitch');

  uglifyjs = require('uglify-js');

  uglifycss = require('uglifycss');

  Job = (function() {
    Job.tasks = {
      js: require('./tasks/js'),
      css: require('./tasks/css'),
      version: require('./tasks/version'),
      phantom: require('./tasks/phantom'),
      browser: require('./tasks/browser'),
      clean: require('./tasks/clean')
    };

    function Job(app, name, config) {
      var taskHelper, tconfig, _i, _len, _ref;
      this.app = app;
      this.name = name;
      this.sname = name.charAt(0).toUpperCase() + name.slice(1);
      this.tasks = [];
      taskHelper = (function(_this) {
        return function(taskConfig) {
          var task;
          task = _this.createTask(taskConfig);
          task.id = _this.tasks.length;
          return _this.tasks.push(task);
        };
      })(this);
      if (Array.isArray(config)) {
        for (_i = 0, _len = config.length; _i < _len; _i++) {
          tconfig = config[_i];
          taskHelper(tconfig);
        }
      } else if (config) {
        taskHelper(config);
      }
      if (this.app.argv.watch) {
        if ((_ref = this.app.argv.command) === 'clean' || _ref === 'deploy') {
          this.watch();
        }
      }
    }

    Job.prototype.createTask = function(config) {
      if (!config.task) {
        Log.errorAndExit("Missing task value for job " + this.name);
      }
      if (Job.tasks[config.task]) {
        return new TaskWrapper(this, config);
      } else {
        return Log.errorAndExit("Cannot find task <blue>" + config.task + "</blue> for job <yellow>" + this.name + "</yellow>");
      }
    };

    Job.prototype.run = function() {
      var callback, handleError, results, task, _i, _len, _ref;
      Log("" + this.sname + " application: <green>" + this.app.name + "</green>");
      results = [];
      handleError = (function(_this) {
        return function(task, ex) {
          Log.error("(" + _this.name + " > " + task.name + ") - " + ex.message);
          if (ex.path) {
            Log.error(ex.path);
          }
          if (!_this.app.argv.watch) {
            return process.exit(1);
          }
        };
      })(this);
      _ref = this.tasks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        callback = (function(task) {
          return function(err, result) {
            if (err) {
              return handleError(task, err);
            } else {
              if (result) {
                return results.push(result);
              }
            }
          };
        })(task);
        task.run(callback);
      }
      return this.write(results);
    };

    Job.prototype.watch = function() {
      var callback, task, _i, _len, _ref, _ref1, _results;
      _ref = this.tasks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (!(((_ref1 = task.watch) != null ? _ref1.length : void 0) > 0)) {
          continue;
        }
        callback = (function(task) {
          return function(filepath) {
            if (typeof task.watchHandler === "function") {
              task.watchHandler(event, filepath);
            }
            return Events.emit("watch", task, event, filepath);
          };
        })(task);
        _results.push(gaze(task.watch, function(err, watcher) {
          if (err) {
            Log.errorAndExit(err);
          }
          return watcher.on('all', function(event, filepath) {
            return callback(event, filepath);
          });
        }));
      }
      return _results;
    };

    Job.prototype.init = function(task) {
      var _ref, _ref1;
      task.src = this.app.applyRoot(task.src || []);
      task.lib = this.app.applyRoot(task.lib || []);
      task.target = this.app.applyRoot(task.target || [], false);
      if (task.watch) {
        task.watch = this.app.applyRoot(task.watch || []);
      } else if (((_ref = task.src) != null ? _ref.length : void 0) > 0 || ((_ref1 = task.lib) != null ? _ref1.length : void 0) > 0) {
        task.watch || (task.watch = task.src.concat(task.lib));
      }
      if (task.watch) {
        this.watchHandler || (this.watchHandler = function(filepath) {
          return Stitch.remove(filepath);
        });
      }
      this.initTarget(task);
      return this.initRoutes(task);
    };

    Job.prototype.initTarget = function(task) {
      if (!task.target) {
        return;
      }
      if (Utils.isDirectory(task.target)) {
        task.target = Utils.cleanPath(task.target, this.app.name);
      }
      if (!(task.targetExt && Utils.endsWith(task.target, "." + task.targetExt))) {
        return task.target = "" + task.target + "." + task.targetExt;
      }
    };

    Job.prototype.initRoutes = function(task) {
      var regexp, sroute, targetUrl, _i, _len, _ref, _results;
      if (this.route) {
        if (Utils.startsWith(this.target, "/")) {
          return this.route = this.route;
        } else {
          return this.route = this.app.applyRoute(this.route);
        }
      } else {
        _ref = this.app["static"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sroute = _ref[_i];
          if (!this.route) {
            if (Utils.startsWith(this.target, sroute.path)) {
              regexp = new RegExp("^" + (sroute.path.replace(/\\/g, "\\\\")) + "(\\\\|\/)?");
              targetUrl = this.target.replace(regexp, "");
              _results.push(this.route = Utils.cleanRoute(sroute.url, targetUrl));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      }
    };

    Job.prototype.applyTargetAndRoutes = function(results) {};

    Job.prototype.write = function(results) {
      var item, result, writeFile, _i, _j, _len, _len1;
      if (this.app.argv.command === "server") {
        results;
      }
      writeFile = (function(_this) {
        return function(target, source) {
          var dirname, ext;
          if (!(target && source)) {
            return;
          }
          dirname = path.dirname(target);
          if (!fs.existsSync(dirname)) {
            fs.mkdirsSync(dirname);
          }
          ext = path.extname(target).slice(1).toLowerCase();
          if (_this.app.argv.compress && _this.minify[ext]) {
            source = _this.minify[ext](source);
          }
          return fs.writeFileSync(target, source);
        };
      })(this);
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if (Array.isArray(result)) {
          for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
            item = result[_j];
            writeFile(item.target, item.source);
          }
        } else {
          writeFile(result.target, result.source);
        }
      }
      return results;
    };

    Job.prototype.minify = {
      js: function(source) {
        return uglifyjs.minify(source, {
          fromString: true
        }).code;
      },
      css: function(source) {
        return uglifycss.processString(source);
      }
    };

    return Job;

  })();

  TaskWrapper = (function() {
    function TaskWrapper(job, config) {
      var key, value, _base;
      this.job = job;
      this.name = config.task;
      for (key in config) {
        value = config[key];
        if (key !== 'job' && key !== 'name' && key !== 'task' && key !== 'argv' && key !== 'run') {
          this[key] = value;
        }
      }
      this.task = typeof (_base = Job.tasks[config.task]).call === "function" ? _base.call(this) : void 0;
      if (typeof this.task !== 'function') {
        Log.errorAndExit("The job <yellow>" + this.job.name + "</yellow> task <blue>" + this.name + "</blue> is invalid.");
      }
      if (this.init === void 0) {
        this.job.init(this);
      } else {
        if (typeof this.init === "function") {
          this.init();
        }
      }
      if (this.argv().command === "server" && !this.route) {
        Log.errorAndExit("Unable to determine server route for <yellow>" + this.target + "</yellow>");
      }
    }

    TaskWrapper.prototype.run = function(callback) {
      if (typeof this.task === "function") {
        return this.task.call(this, callback);
      } else {
        return Log.errorAndExit("In job '" + this.job.name + " the task '" + this.name + "' needs to be a function.");
      }
    };

    TaskWrapper.prototype.argv = function() {
      return this.job.app.argv;
    };

    return TaskWrapper;

  })();

  module.exports = Job;

}).call(this);
