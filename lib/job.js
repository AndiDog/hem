// Generated by CoffeeScript 1.7.0
(function() {
  var Job, Log, TaskWrapper, events, fs, path, utils;

  fs = require('fs-extra');

  path = require('path');

  utils = require('./utils');

  events = require('./events');

  Log = require('./log');

  Job = (function() {
    Job.tasks = {
      js: require('./tasks/js'),
      css: require('./tasks/css'),
      version: require('./tasks/version'),
      phantom: require('./tasks/phantom'),
      clean: require('./tasks/clean')
    };

    function Job(app, name, config) {
      var taskHelper, tconfig, _i, _len, _ref;
      this.app = app;
      this.name = name;
      this.sname = name.charAt(0).toUpperCase() + name.slice(1);
      this.tasks = [];
      taskHelper = (function(_this) {
        return function(taskConfig) {
          var task;
          task = _this.createTask(taskConfig);
          task.id = _this.tasks.length;
          return _this.tasks.push(task);
        };
      })(this);
      if (Array.isArray(config)) {
        for (_i = 0, _len = config.length; _i < _len; _i++) {
          tconfig = config[_i];
          taskHelper(tconfig);
        }
      } else if (config) {
        taskHelper(config);
      }
      if (this.app.argv.watch) {
        if ((_ref = this.app.argv.command) === 'clean' || _ref === 'deploy') {
          this.watch();
        }
      }
    }

    Job.prototype.createTask = function(config) {
      if (!config.task) {
        Log.errorAndExit("Missing task value for job " + this.name);
      }
      if (Job.tasks[config.task]) {
        return new TaskWrapper(this, config);
      } else {
        return Log.errorAndExit("Cannot find task <blue>" + config.task + "</blue> for job <yellow>" + this.name + "</yellow>");
      }
    };

    Job.prototype.run = function(params, jobId) {
      var task, _i, _len, _ref, _results;
      if (params == null) {
        params = {};
      }
      Log("" + this.sname + " application: <green>" + this.app.name + "</green>");
      _ref = this.tasks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (jobId) {
          if (jobId === task.name || jobId === task.id) {
            _results.push(task.run(params));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(task.run(params));
        }
      }
      return _results;
    };

    Job.prototype.watch = function() {
      var callback, dir, dirs, fileOrDir, options, task, _i, _j, _len, _len1, _ref, _ref1, _results;
      options = {
        persistent: true,
        interval: 1000,
        ignoreDotFiles: true
      };
      dirs = [];
      _ref = this.tasks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        _ref1 = task.watch;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          fileOrDir = _ref1[_j];
          if (!fs.existsSync(fileOrDir)) {
            continue;
          }
          if (utils.isDirectory(fileOrDir)) {
            dirs.push(fileOrDir);
          } else {
            dirs.push(path.dirname(fileOrDir));
          }
        }
        dirs = utils.removeDuplicateValues(dirs);
        callback = function(task) {
          return (function(_this) {
            return function(file, curr, prev) {
              if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
                task.run({
                  watch: file
                });
                return events.emit("watch", task, file);
              }
            };
          })(this);
        };
        _results.push((function() {
          var _k, _len2, _results1;
          _results1 = [];
          for (_k = 0, _len2 = dirs.length; _k < _len2; _k++) {
            dir = dirs[_k];
            _results1.push(require('watch').watchTree(dir, options, callback));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Job.prototype.init = function(task) {
      task.src = this.app.applyRoot(task.src || []);
      task.libs = this.app.applyRoot(task.libs || []);
      task.target = this.app.applyRoot(task.target || [], false);
      task.watch || (task.watch = task.src.concat(task.libs));
      this.initTarget(task);
      return this.initRoutes(task);
    };

    Job.prototype.initTarget = function(task) {
      if (!task.target) {
        return;
      }
      if (utils.isDirectory(task.target)) {
        task.target = utils.cleanPath(task.target, this.app.name);
      }
      if (!(task.targetExt && utils.endsWith(task.target, "." + task.targetExt))) {
        return task.target = "" + task.target + "." + task.targetExt;
      }
    };

    Job.prototype.initRoutes = function(task) {
      var regexp, sroute, targetUrl, _i, _len, _ref, _results;
      if (this.route) {
        if (utils.startsWith(this.target, "/")) {
          return this.route = this.route;
        } else {
          return this.route = this.app.applyRoute(this.route);
        }
      } else {
        _ref = this.app["static"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sroute = _ref[_i];
          if (!this.route) {
            if (utils.startsWith(this.target, sroute.path)) {
              regexp = new RegExp("^" + (sroute.path.replace(/\\/g, "\\\\")) + "(\\\\|\/)?");
              targetUrl = this.target.replace(regexp, "");
              _results.push(this.route = utils.cleanRoute(sroute.url, targetUrl));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      }
    };

    return Job;

  })();

  TaskWrapper = (function() {
    function TaskWrapper(job, config) {
      var key, value, _base;
      this.job = job;
      this.name = config.task;
      this.argv = job.app.argv;
      for (key in config) {
        value = config[key];
        if (key !== 'job' && key !== 'name' && key !== 'task' && key !== 'argv') {
          this[key] = value;
        }
      }
      this.task = typeof (_base = Job.tasks[config.task]).call === "function" ? _base.call(this) : void 0;
      if (typeof this.task !== 'function') {
        Log.errorAndExit("The job <yellow>" + this.job.name + "</yellow> task <blue>" + this.name + "</blue> is invalid.");
      }
      if (this.init === void 0) {
        this.job.init(this);
      } else {
        if (typeof this.init === "function") {
          this.init();
        }
      }
      if (this.job.app.argv.command === "server" && !this.route) {
        Log.errorAndExit("Unable to determine server route for <yellow>" + this.target + "</yellow>");
      }
    }

    TaskWrapper.prototype.run = function(params) {
      if (params == null) {
        params = {};
      }
      if (typeof this.task === "function") {
        return this.task.call(this, params);
      } else {
        return Log.errorAndExit("In job '" + this.job.name + " the task '" + this.name + "' does not have a method to call.");
      }
    };

    TaskWrapper.prototype.handleError = function(ex) {
      Log.error("(" + this.job.name + "/" + this.name + ") - " + ex.message);
      if (ex.path) {
        Log.error(ex.path);
      }
      if (ex.stack) {
        console.log(ex.stack);
      }
      if (!this.argv.watch) {
        return process.exit(1);
      }
    };

    return TaskWrapper;

  })();

  module.exports = Job;

}).call(this);
